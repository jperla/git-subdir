#!/usr/bin/env python2.7
import os
import sys
import shutil
import contextlib
import subprocess

########################
# Utilities
########################
@contextlib.contextmanager
def chdir(directory):
    """Accepts directory string.
        Changes to the directory for an operation within with 
            and then goes back to original one.
    """
    original_directory = os.getcwd()
    os.chdir(directory)
    yield
    os.chdir(original_directory)

def git_root():
    """Finds the absolute path of the root of the 
        git repository and returns it."""
    return subprocess.check_output(['git', 'rev-parse', '--show-toplevel']).rstrip(' \r\n')

def assert_is_clean(directory):
    """Ensures directory has no untracked or modified files or throws error."""
    o = subprocess.check_output(['git', 'status', '-s', directory]).strip(' \r\n')
    assert o == '', 'Directory is not clean: %s' % directory

########################
# .subdirs config
########################

def subdirs_filename():
    """Finds the root of the git repository
        and returns the filename of subdirs config file."""
    return os.path.join(git_root(), '.subdirs')

def read_subdir_section(f):
    """Accepts file pointer.
        Returns a 3-tuple of (path, url, base_commit) that is submodules.
    """
    section_header = f.readline().rstrip(' \r\n')
    if section_header == '':
        return None
    path = f.readline().rstrip(' \r\n').split(' = ', 1)[1]
    url = f.readline().rstrip(' \r\n').split(' = ', 1)[1]
    base_commit = f.readline().rstrip(' \r\n').split(' = ', 1)[1]
    assert section_header == '[subdir "%s"]' % path, 'Section header in invalid format: %s' % section_header
    for letter in base_commit:
        assert letter in set('abcdef1234567890'), 'Commit hash invalid'
    return (path, url, base_commit)

def read_subdirs_file():
    """Finds the root of the git repository
        and reads the configuration.
       Returns a list of 3-tuples (paths, url, base_commit)."""
    subdirs = []
    if os.path.exists(subdirs_filename()):
        with open(subdirs_filename(), 'r') as f:
            while True:
                section = read_subdir_section(f)
                if section is None:
                    break
                subdirs.append(section)
    return subdirs

def read_subdir_info(path):
    """Accepts path string, returns info in subdirs config file
        3-tuple of (path, url, base_commit).
        Returns None if no matching path found.
    """
    subdirs = read_subdirs_file()
    for subdir in subdirs:
        if subdir[0] == path:
            return subdir
    else:
        return None

def write_subdirs_file(subdirs):
    """Accepts a list of (path, url, base_commit).
        Saves it to subdirs config file"""
    with open(subdirs_filename(), 'w') as f:
        for path, url, base_commit in subdirs:
            f.write('[subdir "%s"]\n' % path)
            f.write('\tpath = %s\n' % path)
            f.write('\turl = %s\n' % url)
            f.write('\tbasecommit = %s\n' % base_commit)

def update_config(path, url, base_commit):
    """Accepts a subdir path in git repo,
         and url string for git cloning.
       Adds or modifies the subdir => url path to
         the subdir config file."""
    assert_subdir_exists((path, url, base_commit))
    subdirs = read_subdirs_file()
    for i,subdir in enumerate(subdirs):
        if subdir[0] == path:
            subdirs[i] = (path, url, base_commit)
    else:
        subdirs.append((path, url, base_commit))
    write_subdirs_file(subdirs)

def remove_subdir_from_config(path):
    """Accepts a path string. Removes that subdir from config file."""
    assert not os.path.exists(os.path.join(git_root(), path)), 'Subdir should have been deleted from filesystem'
    assert read_subdir_info(path) is not None, 'Subdir is not in the config file, nothing to remove'
    subdirs = [s for s in read_subdirs_file() if s[0] != path]
    write_subdirs_file(subdirs)

########################
# Testing tools
########################

def assert_subdir_exists(subdir):
    """Accepts subdir 3-tuple (path string name, url string, base_commit hash)."""
    assert isinstance(subdir, tuple)
    assert len(subdir) == 3
    p = os.path.join(git_root(), subdir[0])
    assert os.path.exists(p), 'Subdir does not exist in filesystem: %s' % subdir[0]

def assert_subdirs_exist():
    """Ensures that every subdir in subdirs directory exists in the git repo (perhaps uncommitted yet)."""
    subdirs = read_subdirs_file()
    for subdir in subdirs:
        assert_subdir_exists(subdir)

########################
# Git subdir methods
########################

def git_subdir_clone(path, url, base_commit=None):
    """Accepts path string for where to place the code and url string for git cloning.
        an url, and a base_commit to pull from.  Defaults to master HEAD."""
    # assert we are at git root
    assert os.path.abspath(git_root()) == os.path.abspath(os.getcwd())

    # assert subdir does not already exist
    assert not os.path.exists(path), 'Subdir path already cloned into repo: %s' % path

    # assert subdir not already in config
    assert read_subdir_info(path) == None, 'Subdir is already in config file'

    if subprocess.call(['git', 'clone', url, path]) != 0:
        raise Exception('Failed to clone url to path %s: %s' % (path, url))

    with chdir(path):
        # checkout the base commit if it is not None, or just use master HEAD's commit
        if base_commit == None:
            base_commit = 'master'

        if subprocess.call(['git', 'checkout', base_commit]) != 0:
            raise Exception('Failed to checkout subdir: %s - %s - %s' % (path, url, base_commit))

        base_commit = subprocess.check_output(['git', 'rev-parse', 'HEAD'])

        # update submodules in the freshly cloned area
        if subprocess.call(['git', 'submodule', 'update', '--init', '--recursive']) != 0:
            raise Exception('Failed to update submodules recursively in %s' % path)

    # clean out .git folders since we don't want submodules anywhere
    for root, dirs, files in os.walk(os.path.join(git_root(), path)):
        for d in dirs:
            if d == '.git':
                shutil.rmtree(os.path.join(root, d))
        for f in files:
            if f == '.git':
                os.remove(os.path.join(root, f))

    # add it
    subprocess.call(['git', 'add', path]) # returns exit code 128 if nothing

    # finally, register it
    update_config(path, url, base_commit)

    return 0

def git_subdir_pull(path, base_commit=None):
    """Accepts a path string for where to pull the code in,
        an url, and a base_commit to pull from.  Defaults to master HEAD.
    """
    # Check that the path is clean
    assert_is_clean(path)

    # Ensure subdir already is cloned in already
    assert_subdir_exists((path, '', base_commit))

    # Ensure that config is right
    subdir = read_subdir_info(path)
    assert subdir is not None, "Path is not a git subdir: %s" % path
    assert isinstance(subdir, tuple)
    assert len(subdir) == 3

    # set up args
    assert path == subdir[0]
    url = subdir[1]
    if base_commit is None:
        base_commit = 'master'

    # Now clear it out
    git_subdir_rm(path)

    # Verified that url is the same, deleted all the files, so now replace it all
    git_subdir_clone(path, url, base_commit)

    return 0

def git_subdir_push(path, local_path):
    """Accepts a path relative to git repo where the subdir is, 
        and a local path string on system to push changes to.
       Note that the local path must be a clean git checkout that 
            includes the base_commit of the subdir
    """
    # Ensure that local_path exists
    assert os.path.exists(local_path), "Local path does not exist: %s" % local_path

    # Ensure subdir already is cloned in already
    assert_subdir_exists((path,'',''))

    subdir = read_subdir_info(path)
    base_commit = subdir[2]

    # Check that the local path (destination) is clean
    assert_is_clean(local_path)

    with chdir(local_path):
        if subprocess.call(['git', 'checkout', base_commit]) != 0:
            raise Exception('Could not checkout commit %s in %s' % (base_commit, local_path))

    #TODO: jperla: must delete things that weren't there
    subprocess.call(['cp', '-a', path, local_path])

    return 0


def git_subdir_rm(path):
    """Accepts a path string for where to delete a subdir
        and deletes it.
    """
    # Check that the path is clean
    assert_is_clean(path)

    # Ensure subdir already is cloned in already
    assert_subdir_exists((path, '', ''))

    # Ensure that the url isn't changing.
    subdir = read_subdir_info(path)
    assert subdir is not None, "Path is not a git subdir: %s" % path
    assert isinstance(subdir, tuple)
    assert len(subdir) == 3

    # Now clear it out
    shutil.rmtree(os.path.join(git_root(), path))
    remove_subdir_from_config(path)

    return 0

########################
# main script
########################
if len(sys.argv) < 3:
    print 'Usage: git-subdir clone <path> <url> [base_commit]'
    print 'Usage: git-subdir pull <path> [base_commit]'
    print 'Usage: git-subdir push <path> <localpath>'
    print 'Usage: git-subdir rm <path>'
    print 'Example: git-subdir clone VendorLib/OCMock ssh://github.com/OCMock a32cf38' 
    print 'Example: git-subdir clone VendorLib/OCMock ssh://github.com/OCMock master' 
    print 'Example: git-subdir pull VendorLib/OCMock a32cf38e5e'
    print 'Example: git-subdir pull VendorLib/OCMock master' 
    print 'Example: git-subdir push VendorLib/OCMock ../OCMock'
    print 'Example: git-subdir rm VendorLib/OCMock'
    sys.exit(0)

try:
    if sys.argv[1] == 'clone':
        sys.exit(git_subdir_clone(sys.argv[2], sys.argv[3], None if len(sys.argv) <= 4 else sys.argv[4]))
    elif sys.argv[1] == 'pull':
        sys.exit(git_subdir_pull(sys.argv[2], None if len(sys.argv) <= 3 else sys.argv[3]))
    elif sys.argv[1] == 'push':
        sys.exit(git_subdir_push(sys.argv[2], sys.argv[3]))
    elif sys.argv[1] == 'rm':
        sys.exit(git_subdir_rm(sys.argv[2]))
except AssertionError,e:
    print e
    sys.exit(1)

